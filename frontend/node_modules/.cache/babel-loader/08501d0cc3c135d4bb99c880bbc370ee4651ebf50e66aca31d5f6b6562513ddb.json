{"ast":null,"code":"import axios from 'axios';\n// import { mockProducts, mockReservations, mockUser, simulateApiDelay, simulateApiError } from '../data/mockData';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nclass ApiService {\n  constructor() {\n    this.api = axios.create({\n      baseURL: API_BASE_URL,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    // Intercepteur pour ajouter le token d'authentification\n    this.api.interceptors.request.use(config => {\n      const token = localStorage.getItem('accessToken');\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    }, error => {\n      return Promise.reject(error);\n    });\n\n    // Intercepteur pour gérer les erreurs d'authentification\n    this.api.interceptors.response.use(response => response, async error => {\n      var _error$response;\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n        localStorage.removeItem('accessToken');\n        localStorage.removeItem('refreshToken');\n        localStorage.removeItem('user');\n        window.location.href = '/login';\n      }\n      return Promise.reject(error);\n    });\n  }\n\n  // Authentification\n  async login(email, password) {\n    // if (USE_MOCK_DATA) {\n    //   await simulateApiDelay(1000);\n    //   if (simulateApiError()) {\n    //     throw new Error('Erreur de connexion');\n    //   }\n\n    //   // Simuler une connexion réussie avec n'importe quel email/password\n    //   const mockResponse = {\n    //     user: mockUser,\n    //     accessToken: 'mock-access-token',\n    //     refreshToken: 'mock-refresh-token',\n    //   };\n    //   return mockResponse;\n    // }\n\n    const response = await this.api.post('/auth/login', {\n      email,\n      password\n    });\n    return response.data.data;\n  }\n  async register(userData) {\n    // if (USE_MOCK_DATA) {\n    //   await simulateApiDelay(1500);\n    //   if (simulateApiError()) {\n    //     throw new Error('Erreur lors de la création du compte');\n    //   }\n\n    //   // Simuler une inscription réussie\n    //   const mockResponse = {\n    //     user: {\n    //       ...mockUser,\n    //       ...userData,\n    //       _id: Date.now().toString(),\n    //     },\n    //     accessToken: 'mock-access-token',\n    //     refreshToken: 'mock-refresh-token',\n    //   };\n    //   return mockResponse;\n    // }\n\n    const response = await this.api.post('/auth/register', userData);\n    return response.data.data;\n  }\n  async refreshToken() {\n    const refreshToken = localStorage.getItem('refreshToken');\n    const response = await this.api.post('/auth/refresh', {\n      refreshToken\n    });\n    return response.data.data;\n  }\n\n  // Produits\n  async createProduct(productData) {\n    const response = await this.api.post('/products', productData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data.data;\n  }\n  async getProducts(params) {\n    try {\n      console.log('Calling API: GET /products with params:', params);\n      const response = await this.api.get('/products', {\n        params\n      });\n      console.log('API Response:', response.data);\n      return response.data;\n    } catch (error) {\n      var _error$response2, _error$response3;\n      console.error('Error fetching products:', error);\n      console.error('Error response:', (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data);\n      console.error('Error status:', (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status);\n      throw error;\n    }\n  }\n  async getProduct(id) {\n    const response = await this.api.get(`/products/${id}`);\n    return response.data.data;\n  }\n\n  // Catégories\n  async getCategories(params) {\n    try {\n      console.log('Calling API: GET /categories');\n      const response = await this.api.get('/categories', {\n        params: {\n          ...params,\n          tree: true\n        }\n      });\n      console.log('Categories API Response:', response.data);\n      return response.data.data || response.data || [];\n    } catch (error) {\n      console.error('Error fetching categories:', error);\n      return [];\n    }\n  }\n\n  // Réservations\n  async createReservation(reservationData) {\n    const response = await this.api.post('/reservations', reservationData);\n    return response.data.data;\n  }\n  async getReservations() {\n    try {\n      console.log('Calling API: GET /reservations');\n      const response = await this.api.get('/reservations');\n      console.log('Reservations API Response:', response.data);\n      return response.data.data || response.data || [];\n    } catch (error) {\n      console.error('Error fetching reservations:', error);\n      return [];\n    }\n  }\n  async cancelReservation(id) {\n    await this.api.delete(`/reservations/${id}`);\n  }\n\n  // Commandes\n  async createOrder(orderData) {\n    const response = await this.api.post('/orders', orderData);\n    return response.data.data;\n  }\n  async getOrders() {\n    try {\n      console.log('Calling API: GET /orders');\n      const response = await this.api.get('/orders');\n      console.log('Orders API Response:', response.data);\n      return response.data.data || response.data || [];\n    } catch (error) {\n      console.error('Error fetching orders:', error);\n      return [];\n    }\n  }\n\n  // Messages\n  async getMessages(userId) {\n    const response = await this.api.get(`/messages/${userId}`);\n    return response.data.data;\n  }\n  async sendMessage(messageData) {\n    const response = await this.api.post('/messages', messageData);\n    return response.data.data;\n  }\n\n  // Profil utilisateur\n  async getProfile() {\n    const response = await this.api.get('/users/profile');\n    return response.data.data;\n  }\n  async updateProfile(userData) {\n    const response = await this.api.put('/users/profile', userData);\n    return response.data.data;\n  }\n\n  // Utilisateurs (pour admin)\n  async getUsers() {\n    try {\n      console.log('Calling API: GET /users');\n      const response = await this.api.get('/users');\n      console.log('Users API Response:', response.data);\n      return response.data.data || response.data || [];\n    } catch (error) {\n      console.error('Error fetching users:', error);\n      return [];\n    }\n  }\n\n  // Fournisseurs (pour admin)\n  async getSuppliers() {\n    try {\n      console.log('Calling API: GET /suppliers');\n      const response = await this.api.get('/suppliers');\n      console.log('Suppliers API Response:', response.data);\n      return response.data.data || response.data || [];\n    } catch (error) {\n      console.error('Error fetching suppliers:', error);\n      return [];\n    }\n  }\n\n  // Notifications\n  async getNotifications() {\n    try {\n      console.log('Calling API: GET /notifications');\n      const response = await this.api.get('/notifications');\n      console.log('Notifications API Response:', response.data);\n      return response.data.data || response.data || [];\n    } catch (error) {\n      console.error('Error fetching notifications:', error);\n      return [];\n    }\n  }\n}\nexport const apiService = new ApiService();\nexport default apiService;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","ApiService","constructor","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","login","email","password","post","data","register","userData","refreshToken","createProduct","productData","getProducts","params","console","log","get","_error$response2","_error$response3","getProduct","id","getCategories","tree","createReservation","reservationData","getReservations","cancelReservation","delete","createOrder","orderData","getOrders","getMessages","userId","sendMessage","messageData","getProfile","updateProfile","put","getUsers","getSuppliers","getNotifications","apiService"],"sources":["C:/Users/51D1B3/MesProjets/Pharmacie/frontend/src/services/api.jsx"],"sourcesContent":["import axios from 'axios';\n// import { mockProducts, mockReservations, mockUser, simulateApiDelay, simulateApiError } from '../data/mockData';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\nclass ApiService {\n  api;\n\n  constructor() {\n    this.api = axios.create({\n      baseURL: API_BASE_URL,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    // Intercepteur pour ajouter le token d'authentification\n    this.api.interceptors.request.use(\n      (config) => {\n        const token = localStorage.getItem('accessToken');\n        if (token) {\n          config.headers.Authorization = `Bearer ${token}`;\n        }\n        return config;\n      },\n      (error) => {\n        return Promise.reject(error);\n      }\n    );\n\n    // Intercepteur pour gérer les erreurs d'authentification\n    this.api.interceptors.response.use(\n      (response) => response,\n      async (error) => {\n        if (error.response?.status === 401) {\n          localStorage.removeItem('accessToken');\n          localStorage.removeItem('refreshToken');\n          localStorage.removeItem('user');\n          window.location.href = '/login';\n        }\n        return Promise.reject(error);\n      }\n    );\n  }\n\n  // Authentification\n  async login(email, password) {\n    // if (USE_MOCK_DATA) {\n    //   await simulateApiDelay(1000);\n    //   if (simulateApiError()) {\n    //     throw new Error('Erreur de connexion');\n    //   }\n      \n    //   // Simuler une connexion réussie avec n'importe quel email/password\n    //   const mockResponse = {\n    //     user: mockUser,\n    //     accessToken: 'mock-access-token',\n    //     refreshToken: 'mock-refresh-token',\n    //   };\n    //   return mockResponse;\n    // }\n\n    const response = await this.api.post('/auth/login', {\n      email,\n      password,\n    });\n    return response.data.data;\n  }\n\n  async register(userData) {\n    // if (USE_MOCK_DATA) {\n    //   await simulateApiDelay(1500);\n    //   if (simulateApiError()) {\n    //     throw new Error('Erreur lors de la création du compte');\n    //   }\n      \n    //   // Simuler une inscription réussie\n    //   const mockResponse = {\n    //     user: {\n    //       ...mockUser,\n    //       ...userData,\n    //       _id: Date.now().toString(),\n    //     },\n    //     accessToken: 'mock-access-token',\n    //     refreshToken: 'mock-refresh-token',\n    //   };\n    //   return mockResponse;\n    // }\n\n    const response = await this.api.post('/auth/register', userData);\n    return response.data.data;\n  }\n\n  async refreshToken() {\n    const refreshToken = localStorage.getItem('refreshToken');\n    const response = await this.api.post('/auth/refresh', {\n      refreshToken,\n    });\n    return response.data.data;\n  }\n\n  // Produits\n  async createProduct(productData) {\n    const response = await this.api.post('/products', productData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data.data;\n  }\n  async getProducts(params) {\n    try {\n      console.log('Calling API: GET /products with params:', params);\n      const response = await this.api.get('/products', { params });\n      console.log('API Response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching products:', error);\n      console.error('Error response:', error.response?.data);\n      console.error('Error status:', error.response?.status);\n      throw error;\n    }\n  }\n\n  async getProduct(id) {\n    const response = await this.api.get(`/products/${id}`);\n    return response.data.data;\n  }\n\n  // Catégories\n  async getCategories(params) {\n    try {\n      console.log('Calling API: GET /categories');\n      const response = await this.api.get('/categories', { params: { ...params, tree: true } });\n      console.log('Categories API Response:', response.data);\n      return response.data.data || response.data || [];\n    } catch (error) {\n      console.error('Error fetching categories:', error);\n      return [];\n    }\n  }\n\n  // Réservations\n  async createReservation(reservationData) {\n    const response = await this.api.post('/reservations', reservationData);\n    return response.data.data;\n  }\n\n  async getReservations() {\n    try {\n      console.log('Calling API: GET /reservations');\n      const response = await this.api.get('/reservations');\n      console.log('Reservations API Response:', response.data);\n      return response.data.data || response.data || [];\n    } catch (error) {\n      console.error('Error fetching reservations:', error);\n      return [];\n    }\n  }\n\n  async cancelReservation(id) {\n    await this.api.delete(`/reservations/${id}`);\n  }\n\n  // Commandes\n  async createOrder(orderData) {\n    const response = await this.api.post('/orders', orderData);\n    return response.data.data;\n  }\n\n  async getOrders() {\n    try {\n      console.log('Calling API: GET /orders');\n      const response = await this.api.get('/orders');\n      console.log('Orders API Response:', response.data);\n      return response.data.data || response.data || [];\n    } catch (error) {\n      console.error('Error fetching orders:', error);\n      return [];\n    }\n  }\n\n  // Messages\n  async getMessages(userId) {\n    const response = await this.api.get(`/messages/${userId}`);\n    return response.data.data;\n  }\n\n  async sendMessage(messageData) {\n    const response = await this.api.post('/messages', messageData);\n    return response.data.data;\n  }\n\n  // Profil utilisateur\n  async getProfile() {\n    const response = await this.api.get('/users/profile');\n    return response.data.data;\n  }\n\n  async updateProfile(userData) {\n    const response = await this.api.put('/users/profile', userData);\n    return response.data.data;\n  }\n\n  // Utilisateurs (pour admin)\n  async getUsers() {\n    try {\n      console.log('Calling API: GET /users');\n      const response = await this.api.get('/users');\n      console.log('Users API Response:', response.data);\n      return response.data.data || response.data || [];\n    } catch (error) {\n      console.error('Error fetching users:', error);\n      return [];\n    }\n  }\n\n  // Fournisseurs (pour admin)\n  async getSuppliers() {\n    try {\n      console.log('Calling API: GET /suppliers');\n      const response = await this.api.get('/suppliers');\n      console.log('Suppliers API Response:', response.data);\n      return response.data.data || response.data || [];\n    } catch (error) {\n      console.error('Error fetching suppliers:', error);\n      return [];\n    }\n  }\n\n  // Notifications\n  async getNotifications() {\n    try {\n      console.log('Calling API: GET /notifications');\n      const response = await this.api.get('/notifications');\n      console.log('Notifications API Response:', response.data);\n      return response.data.data || response.data || [];\n    } catch (error) {\n      console.error('Error fetching notifications:', error);\n      return [];\n    }\n  }\n}\n\nexport const apiService = new ApiService();\nexport default apiService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}