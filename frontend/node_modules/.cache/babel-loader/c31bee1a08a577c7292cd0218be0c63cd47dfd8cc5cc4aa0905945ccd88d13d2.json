{"ast":null,"code":"// Service pour tracker les connexions clients en temps réel\nconst API_URL = process.env.REACT_APP_API_URL;\nclass ConnectionTracker {\n  constructor() {\n    this.connectedClients = new Set();\n    this.listeners = [];\n    this.heartbeatInterval = null;\n    this.startHeartbeat();\n  }\n\n  // Démarrer le heartbeat pour maintenir les connexions actives\n  startHeartbeat() {\n    this.heartbeatInterval = setInterval(() => {\n      this.sendHeartbeat();\n    }, 30000); // Heartbeat toutes les 30 secondes\n  }\n\n  // Envoyer un heartbeat au serveur\n  async sendHeartbeat() {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) return;\n      const response = await fetch(`${API_URL}/api/auth/heartbeat`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        this.updateConnectedClients(data.connectedClients || []);\n      }\n    } catch (error) {\n      console.error('Erreur heartbeat:', error);\n    }\n  }\n\n  // Mettre à jour la liste des clients connectés\n  updateConnectedClients(clients) {\n    this.connectedClients = new Set(clients);\n    this.notifyListeners();\n  }\n\n  // Ajouter un client connecté\n  addConnectedClient(clientId) {\n    this.connectedClients.add(clientId);\n    this.notifyListeners();\n  }\n\n  // Supprimer un client déconnecté\n  removeConnectedClient(clientId) {\n    this.connectedClients.delete(clientId);\n    this.notifyListeners();\n  }\n\n  // Obtenir la liste des clients connectés\n  getConnectedClients() {\n    return Array.from(this.connectedClients);\n  }\n\n  // Vérifier si un client est connecté\n  isClientConnected(clientId) {\n    return this.connectedClients.has(clientId);\n  }\n\n  // Ajouter un listener pour les changements\n  addListener(callback) {\n    this.listeners.push(callback);\n    return () => {\n      this.listeners = this.listeners.filter(l => l !== callback);\n    };\n  }\n\n  // Notifier tous les listeners\n  notifyListeners() {\n    this.listeners.forEach(callback => {\n      try {\n        callback(this.getConnectedClients());\n      } catch (error) {\n        console.error('Erreur dans listener:', error);\n      }\n    });\n  }\n\n  // Marquer la connexion d'un utilisateur\n  async markUserConnected() {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) return;\n      await fetch(`${API_URL}/api/auth/connect`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n    } catch (error) {\n      console.error('Erreur lors de la connexion:', error);\n    }\n  }\n\n  // Marquer la déconnexion d'un utilisateur\n  async markUserDisconnected() {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) return;\n      await fetch(`${API_URL}/api/auth/disconnect`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n    } catch (error) {\n      console.error('Erreur lors de la déconnexion:', error);\n    }\n  }\n\n  // Nettoyer les ressources\n  cleanup() {\n    if (this.heartbeatInterval) {\n      clearInterval(this.heartbeatInterval);\n    }\n    this.listeners = [];\n  }\n}\n\n// Instance singleton\nconst connectionTracker = new ConnectionTracker();\nexport default connectionTracker;","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","ConnectionTracker","constructor","connectedClients","Set","listeners","heartbeatInterval","startHeartbeat","setInterval","sendHeartbeat","token","localStorage","getItem","response","fetch","method","headers","ok","data","json","updateConnectedClients","error","console","clients","notifyListeners","addConnectedClient","clientId","add","removeConnectedClient","delete","getConnectedClients","Array","from","isClientConnected","has","addListener","callback","push","filter","l","forEach","markUserConnected","markUserDisconnected","cleanup","clearInterval","connectionTracker"],"sources":["C:/Users/51D1B3/MesProjets/Pharmacie/frontend/src/services/connectionTracker.js"],"sourcesContent":["// Service pour tracker les connexions clients en temps réel\nconst API_URL = process.env.REACT_APP_API_URL;\n\nclass ConnectionTracker {\n  constructor() {\n    this.connectedClients = new Set();\n    this.listeners = [];\n    this.heartbeatInterval = null;\n    this.startHeartbeat();\n  }\n\n  // Démarrer le heartbeat pour maintenir les connexions actives\n  startHeartbeat() {\n    this.heartbeatInterval = setInterval(() => {\n      this.sendHeartbeat();\n    }, 30000); // Heartbeat toutes les 30 secondes\n  }\n\n  // Envoyer un heartbeat au serveur\n  async sendHeartbeat() {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) return;\n\n      const response = await fetch(`${API_URL}/api/auth/heartbeat`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        this.updateConnectedClients(data.connectedClients || []);\n      }\n    } catch (error) {\n      console.error('Erreur heartbeat:', error);\n    }\n  }\n\n  // Mettre à jour la liste des clients connectés\n  updateConnectedClients(clients) {\n    this.connectedClients = new Set(clients);\n    this.notifyListeners();\n  }\n\n  // Ajouter un client connecté\n  addConnectedClient(clientId) {\n    this.connectedClients.add(clientId);\n    this.notifyListeners();\n  }\n\n  // Supprimer un client déconnecté\n  removeConnectedClient(clientId) {\n    this.connectedClients.delete(clientId);\n    this.notifyListeners();\n  }\n\n  // Obtenir la liste des clients connectés\n  getConnectedClients() {\n    return Array.from(this.connectedClients);\n  }\n\n  // Vérifier si un client est connecté\n  isClientConnected(clientId) {\n    return this.connectedClients.has(clientId);\n  }\n\n  // Ajouter un listener pour les changements\n  addListener(callback) {\n    this.listeners.push(callback);\n    return () => {\n      this.listeners = this.listeners.filter(l => l !== callback);\n    };\n  }\n\n  // Notifier tous les listeners\n  notifyListeners() {\n    this.listeners.forEach(callback => {\n      try {\n        callback(this.getConnectedClients());\n      } catch (error) {\n        console.error('Erreur dans listener:', error);\n      }\n    });\n  }\n\n  // Marquer la connexion d'un utilisateur\n  async markUserConnected() {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) return;\n\n      await fetch(`${API_URL}/api/auth/connect`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n    } catch (error) {\n      console.error('Erreur lors de la connexion:', error);\n    }\n  }\n\n  // Marquer la déconnexion d'un utilisateur\n  async markUserDisconnected() {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) return;\n\n      await fetch(`${API_URL}/api/auth/disconnect`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n    } catch (error) {\n      console.error('Erreur lors de la déconnexion:', error);\n    }\n  }\n\n  // Nettoyer les ressources\n  cleanup() {\n    if (this.heartbeatInterval) {\n      clearInterval(this.heartbeatInterval);\n    }\n    this.listeners = [];\n  }\n}\n\n// Instance singleton\nconst connectionTracker = new ConnectionTracker();\n\nexport default connectionTracker;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}