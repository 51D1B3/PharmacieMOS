{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\51D1B3\\\\MesProjets\\\\Pharmacie\\\\frontend\\\\src\\\\contexts\\\\ChatContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useAuth } from './AuthContext.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatContext = /*#__PURE__*/createContext();\nexport const useChat = () => {\n  _s();\n  const context = useContext(ChatContext);\n  if (!context) {\n    throw new Error('useChat must be used within a ChatProvider');\n  }\n  return context;\n};\n_s(useChat, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const ChatProvider = ({\n  children\n}) => {\n  _s2();\n  const {\n    user\n  } = useAuth();\n  const [conversations, setConversations] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [socket, setSocket] = useState(null);\n\n  // Load conversations from localStorage on mount\n  useEffect(() => {\n    if (user) {\n      const savedConversations = localStorage.getItem(`chat_conversations_${user._id}`);\n      const savedUnreadCount = localStorage.getItem(`chat_unread_${user._id}`);\n      if (savedConversations) {\n        const parsedConversations = JSON.parse(savedConversations);\n        // Convert timestamp strings back to Date objects\n        const conversationsWithDates = parsedConversations.map(conv => ({\n          ...conv,\n          timestamp: new Date(conv.timestamp),\n          messages: conv.messages.map(msg => ({\n            ...msg,\n            timestamp: new Date(msg.timestamp)\n          }))\n        }));\n        setConversations(conversationsWithDates);\n      }\n      if (savedUnreadCount) {\n        setUnreadCount(parseInt(savedUnreadCount));\n      }\n    }\n  }, [user]);\n\n  // Save conversations to localStorage whenever they change\n  useEffect(() => {\n    if (user && conversations.length >= 0) {\n      localStorage.setItem(`chat_conversations_${user._id}`, JSON.stringify(conversations));\n    }\n  }, [conversations, user]);\n\n  // Save unread count to localStorage whenever it changes\n  useEffect(() => {\n    if (user) {\n      localStorage.setItem(`chat_unread_${user._id}`, unreadCount.toString());\n    }\n  }, [unreadCount, user]);\n\n  // Real-time polling to check for new messages from other users\n  useEffect(() => {\n    if (!user) return;\n    const pollInterval = setInterval(() => {\n      // Check if there are new messages in localStorage from other users\n      const currentConversations = JSON.parse(localStorage.getItem(`chat_conversations_${user._id}`) || '[]');\n      const currentUnreadCount = parseInt(localStorage.getItem(`chat_unread_${user._id}`) || '0');\n\n      // Update state if there are changes\n      if (JSON.stringify(currentConversations) !== JSON.stringify(conversations)) {\n        const conversationsWithDates = currentConversations.map(conv => ({\n          ...conv,\n          timestamp: new Date(conv.timestamp),\n          messages: conv.messages.map(msg => ({\n            ...msg,\n            timestamp: new Date(msg.timestamp)\n          }))\n        }));\n        setConversations(conversationsWithDates);\n      }\n      if (currentUnreadCount !== unreadCount) {\n        setUnreadCount(currentUnreadCount);\n      }\n    }, 2000); // Poll every 2 seconds\n\n    return () => clearInterval(pollInterval);\n  }, [user, conversations, unreadCount]);\n  const getRandomMessage = () => {\n    const clientMessages = ['Merci pour votre aide', 'Avez-vous d\\'autres recommandations?', 'À quelle heure fermez-vous?', 'Puis-je réserver ce médicament?', 'Combien coûte ce traitement?'];\n    const adminMessages = ['Je vérifie cela pour vous', 'Oui, nous avons ce produit en stock', 'Je vous recommande de consulter votre médecin', 'Nous sommes ouverts jusqu\\'à 20h', 'Bien sûr, je peux vous le réserver'];\n    const messages = user.role === 'admin' || user.role === 'pharmacist' ? clientMessages : adminMessages;\n    return messages[Math.floor(Math.random() * messages.length)];\n  };\n  const sendMessage = (conversationId, text, targetUserId = null) => {\n    const newMessage = {\n      id: Date.now(),\n      senderId: user._id,\n      senderName: `${user.prenom || ''} ${user.nom || ''}`.trim() || user.name || (user.role === 'admin' || user.role === 'pharmacist' ? 'PharmaMOS' : 'Client'),\n      text: text,\n      timestamp: new Date(),\n      isAdmin: user.role === 'admin' || user.role === 'pharmacist',\n      isEdited: false\n    };\n\n    // Update current user's conversations\n    setConversations(prev => {\n      const existingConv = prev.find(conv => conv.id === conversationId);\n      if (existingConv) {\n        // Update existing conversation\n        return prev.map(conv => {\n          if (conv.id === conversationId) {\n            const updatedConv = {\n              ...conv,\n              messages: [...conv.messages, newMessage],\n              lastMessage: text,\n              timestamp: new Date()\n            };\n\n            // If message is from client to admin, increment unread count for admin\n            if (!newMessage.isAdmin && user.role !== 'admin' && user.role !== 'pharmacist') {\n              updatedConv.unreadCount = (conv.unreadCount || 0) + 1;\n            }\n            return updatedConv;\n          }\n          return conv;\n        });\n      } else {\n        // Create new conversation\n        const isCurrentUserAdmin = user.role === 'admin' || user.role === 'pharmacist';\n        const newConversation = {\n          id: conversationId,\n          clientId: isCurrentUserAdmin ? conversationId : user._id,\n          clientName: isCurrentUserAdmin ? 'Client' : `${user.prenom || ''} ${user.nom || ''}`.trim() || user.name || 'Client',\n          clientAvatar: isCurrentUserAdmin ? 'CL' : user.prenom && user.nom ? `${user.prenom[0]}${user.nom[0]}`.toUpperCase() : user.name ? user.name.split(' ').map(n => n[0]).join('').toUpperCase() : 'CL',\n          lastMessage: text,\n          timestamp: new Date(),\n          unreadCount: 0,\n          isOnline: true,\n          messages: [newMessage]\n        };\n        return [...prev, newConversation];\n      }\n    });\n\n    // Also update the other user's conversations (simulate real-time)\n    if (targetUserId || !newMessage.isAdmin) {\n      const otherUserId = targetUserId || 'admin';\n      const otherUserConversations = JSON.parse(localStorage.getItem(`chat_conversations_${otherUserId}`) || '[]');\n      const otherUserUnreadCount = parseInt(localStorage.getItem(`chat_unread_${otherUserId}`) || '0');\n      const existingConvIndex = otherUserConversations.findIndex(conv => conv.id === conversationId || conv.clientId === user._id);\n      if (existingConvIndex >= 0) {\n        // Update existing conversation for other user\n        otherUserConversations[existingConvIndex] = {\n          ...otherUserConversations[existingConvIndex],\n          messages: [...otherUserConversations[existingConvIndex].messages, newMessage],\n          lastMessage: text,\n          timestamp: new Date(),\n          unreadCount: (otherUserConversations[existingConvIndex].unreadCount || 0) + 1\n        };\n      } else {\n        // Create new conversation for other user (admin)\n        const newConvForOther = {\n          id: user._id,\n          clientId: user._id,\n          clientName: `${user.prenom || ''} ${user.nom || ''}`.trim() || user.name || 'Client',\n          clientAvatar: user.prenom && user.nom ? `${user.prenom[0]}${user.nom[0]}`.toUpperCase() : user.name ? user.name.split(' ').map(n => n[0]).join('').toUpperCase() : 'CL',\n          lastMessage: text,\n          timestamp: new Date(),\n          unreadCount: 1,\n          isOnline: true,\n          messages: [newMessage]\n        };\n        otherUserConversations.push(newConvForOther);\n      }\n\n      // Save to localStorage for other user\n      localStorage.setItem(`chat_conversations_${otherUserId}`, JSON.stringify(otherUserConversations));\n      localStorage.setItem(`chat_unread_${otherUserId}`, (otherUserUnreadCount + 1).toString());\n    }\n    console.log('Message sent:', newMessage);\n    return newMessage;\n  };\n  const markAsRead = conversationId => {\n    setConversations(prev => prev.map(conv => {\n      if (conv.id === conversationId) {\n        const unreadToSubtract = conv.unreadCount;\n        setUnreadCount(prevCount => Math.max(0, prevCount - unreadToSubtract));\n        return {\n          ...conv,\n          unreadCount: 0\n        };\n      }\n      return conv;\n    }));\n  };\n  const editMessage = (conversationId, messageId, newText) => {\n    setConversations(prev => prev.map(conv => {\n      if (conv.id === conversationId) {\n        return {\n          ...conv,\n          messages: conv.messages.map(msg => msg.id === messageId ? {\n            ...msg,\n            text: newText,\n            isEdited: true,\n            editedAt: new Date()\n          } : msg)\n        };\n      }\n      return conv;\n    }));\n  };\n  const deleteMessage = (conversationId, messageId) => {\n    setConversations(prev => prev.map(conv => {\n      if (conv.id === conversationId) {\n        const updatedMessages = conv.messages.filter(msg => msg.id !== messageId);\n        return {\n          ...conv,\n          messages: updatedMessages,\n          lastMessage: updatedMessages.length > 0 ? updatedMessages[updatedMessages.length - 1].text : ''\n        };\n      }\n      return conv;\n    }));\n  };\n  const getConversation = conversationId => {\n    return conversations.find(conv => conv.id === conversationId);\n  };\n  const value = {\n    conversations,\n    unreadCount,\n    sendMessage,\n    markAsRead,\n    getConversation,\n    editMessage,\n    deleteMessage,\n    socket\n  };\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 272,\n    columnNumber: 5\n  }, this);\n};\n_s2(ChatProvider, \"QJoRkmw7wV2B7zZfXKp+oKWeSAs=\", false, function () {\n  return [useAuth];\n});\n_c = ChatProvider;\nvar _c;\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useAuth","jsxDEV","_jsxDEV","ChatContext","useChat","_s","context","Error","ChatProvider","children","_s2","user","conversations","setConversations","unreadCount","setUnreadCount","socket","setSocket","savedConversations","localStorage","getItem","_id","savedUnreadCount","parsedConversations","JSON","parse","conversationsWithDates","map","conv","timestamp","Date","messages","msg","parseInt","length","setItem","stringify","toString","pollInterval","setInterval","currentConversations","currentUnreadCount","clearInterval","getRandomMessage","clientMessages","adminMessages","role","Math","floor","random","sendMessage","conversationId","text","targetUserId","newMessage","id","now","senderId","senderName","prenom","nom","trim","name","isAdmin","isEdited","prev","existingConv","find","updatedConv","lastMessage","isCurrentUserAdmin","newConversation","clientId","clientName","clientAvatar","toUpperCase","split","n","join","isOnline","otherUserId","otherUserConversations","otherUserUnreadCount","existingConvIndex","findIndex","newConvForOther","push","console","log","markAsRead","unreadToSubtract","prevCount","max","editMessage","messageId","newText","editedAt","deleteMessage","updatedMessages","filter","getConversation","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/51D1B3/MesProjets/Pharmacie/frontend/src/contexts/ChatContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useAuth } from './AuthContext.jsx';\n\nconst ChatContext = createContext();\n\nexport const useChat = () => {\n  const context = useContext(ChatContext);\n  if (!context) {\n    throw new Error('useChat must be used within a ChatProvider');\n  }\n  return context;\n};\n\nexport const ChatProvider = ({ children }) => {\n  const { user } = useAuth();\n  const [conversations, setConversations] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [socket, setSocket] = useState(null);\n\n  // Load conversations from localStorage on mount\n  useEffect(() => {\n    if (user) {\n      const savedConversations = localStorage.getItem(`chat_conversations_${user._id}`);\n      const savedUnreadCount = localStorage.getItem(`chat_unread_${user._id}`);\n      \n      if (savedConversations) {\n        const parsedConversations = JSON.parse(savedConversations);\n        // Convert timestamp strings back to Date objects\n        const conversationsWithDates = parsedConversations.map(conv => ({\n          ...conv,\n          timestamp: new Date(conv.timestamp),\n          messages: conv.messages.map(msg => ({\n            ...msg,\n            timestamp: new Date(msg.timestamp)\n          }))\n        }));\n        setConversations(conversationsWithDates);\n      }\n      \n      if (savedUnreadCount) {\n        setUnreadCount(parseInt(savedUnreadCount));\n      }\n    }\n  }, [user]);\n\n  // Save conversations to localStorage whenever they change\n  useEffect(() => {\n    if (user && conversations.length >= 0) {\n      localStorage.setItem(`chat_conversations_${user._id}`, JSON.stringify(conversations));\n    }\n  }, [conversations, user]);\n\n  // Save unread count to localStorage whenever it changes\n  useEffect(() => {\n    if (user) {\n      localStorage.setItem(`chat_unread_${user._id}`, unreadCount.toString());\n    }\n  }, [unreadCount, user]);\n\n  // Real-time polling to check for new messages from other users\n  useEffect(() => {\n    if (!user) return;\n\n    const pollInterval = setInterval(() => {\n      // Check if there are new messages in localStorage from other users\n      const currentConversations = JSON.parse(localStorage.getItem(`chat_conversations_${user._id}`) || '[]');\n      const currentUnreadCount = parseInt(localStorage.getItem(`chat_unread_${user._id}`) || '0');\n      \n      // Update state if there are changes\n      if (JSON.stringify(currentConversations) !== JSON.stringify(conversations)) {\n        const conversationsWithDates = currentConversations.map(conv => ({\n          ...conv,\n          timestamp: new Date(conv.timestamp),\n          messages: conv.messages.map(msg => ({\n            ...msg,\n            timestamp: new Date(msg.timestamp)\n          }))\n        }));\n        setConversations(conversationsWithDates);\n      }\n      \n      if (currentUnreadCount !== unreadCount) {\n        setUnreadCount(currentUnreadCount);\n      }\n    }, 2000); // Poll every 2 seconds\n\n    return () => clearInterval(pollInterval);\n  }, [user, conversations, unreadCount]);\n\n  const getRandomMessage = () => {\n    const clientMessages = [\n      'Merci pour votre aide',\n      'Avez-vous d\\'autres recommandations?',\n      'À quelle heure fermez-vous?',\n      'Puis-je réserver ce médicament?',\n      'Combien coûte ce traitement?'\n    ];\n    \n    const adminMessages = [\n      'Je vérifie cela pour vous',\n      'Oui, nous avons ce produit en stock',\n      'Je vous recommande de consulter votre médecin',\n      'Nous sommes ouverts jusqu\\'à 20h',\n      'Bien sûr, je peux vous le réserver'\n    ];\n\n    const messages = user.role === 'admin' || user.role === 'pharmacist' ? clientMessages : adminMessages;\n    return messages[Math.floor(Math.random() * messages.length)];\n  };\n\n  const sendMessage = (conversationId, text, targetUserId = null) => {\n    const newMessage = {\n      id: Date.now(),\n      senderId: user._id,\n      senderName: `${user.prenom || ''} ${user.nom || ''}`.trim() || user.name || (user.role === 'admin' || user.role === 'pharmacist' ? 'PharmaMOS' : 'Client'),\n      text: text,\n      timestamp: new Date(),\n      isAdmin: user.role === 'admin' || user.role === 'pharmacist',\n      isEdited: false\n    };\n\n    // Update current user's conversations\n    setConversations(prev => {\n      const existingConv = prev.find(conv => conv.id === conversationId);\n      \n      if (existingConv) {\n        // Update existing conversation\n        return prev.map(conv => {\n          if (conv.id === conversationId) {\n            const updatedConv = {\n              ...conv,\n              messages: [...conv.messages, newMessage],\n              lastMessage: text,\n              timestamp: new Date()\n            };\n            \n            // If message is from client to admin, increment unread count for admin\n            if (!newMessage.isAdmin && (user.role !== 'admin' && user.role !== 'pharmacist')) {\n              updatedConv.unreadCount = (conv.unreadCount || 0) + 1;\n            }\n            \n            return updatedConv;\n          }\n          return conv;\n        });\n      } else {\n        // Create new conversation\n        const isCurrentUserAdmin = user.role === 'admin' || user.role === 'pharmacist';\n        const newConversation = {\n          id: conversationId,\n          clientId: isCurrentUserAdmin ? conversationId : user._id,\n          clientName: isCurrentUserAdmin ? 'Client' : `${user.prenom || ''} ${user.nom || ''}`.trim() || user.name || 'Client',\n          clientAvatar: isCurrentUserAdmin ? 'CL' : (user.prenom && user.nom ? `${user.prenom[0]}${user.nom[0]}`.toUpperCase() : (user.name ? user.name.split(' ').map(n => n[0]).join('').toUpperCase() : 'CL')),\n          lastMessage: text,\n          timestamp: new Date(),\n          unreadCount: 0,\n          isOnline: true,\n          messages: [newMessage]\n        };\n        \n        return [...prev, newConversation];\n      }\n    });\n\n    // Also update the other user's conversations (simulate real-time)\n    if (targetUserId || !newMessage.isAdmin) {\n      const otherUserId = targetUserId || 'admin';\n      const otherUserConversations = JSON.parse(localStorage.getItem(`chat_conversations_${otherUserId}`) || '[]');\n      const otherUserUnreadCount = parseInt(localStorage.getItem(`chat_unread_${otherUserId}`) || '0');\n      \n      const existingConvIndex = otherUserConversations.findIndex(conv => \n        conv.id === conversationId || conv.clientId === user._id\n      );\n      \n      if (existingConvIndex >= 0) {\n        // Update existing conversation for other user\n        otherUserConversations[existingConvIndex] = {\n          ...otherUserConversations[existingConvIndex],\n          messages: [...otherUserConversations[existingConvIndex].messages, newMessage],\n          lastMessage: text,\n          timestamp: new Date(),\n          unreadCount: (otherUserConversations[existingConvIndex].unreadCount || 0) + 1\n        };\n      } else {\n        // Create new conversation for other user (admin)\n        const newConvForOther = {\n          id: user._id,\n          clientId: user._id,\n          clientName: `${user.prenom || ''} ${user.nom || ''}`.trim() || user.name || 'Client',\n          clientAvatar: user.prenom && user.nom ? `${user.prenom[0]}${user.nom[0]}`.toUpperCase() : (user.name ? user.name.split(' ').map(n => n[0]).join('').toUpperCase() : 'CL'),\n          lastMessage: text,\n          timestamp: new Date(),\n          unreadCount: 1,\n          isOnline: true,\n          messages: [newMessage]\n        };\n        otherUserConversations.push(newConvForOther);\n      }\n      \n      // Save to localStorage for other user\n      localStorage.setItem(`chat_conversations_${otherUserId}`, JSON.stringify(otherUserConversations));\n      localStorage.setItem(`chat_unread_${otherUserId}`, (otherUserUnreadCount + 1).toString());\n    }\n\n    console.log('Message sent:', newMessage);\n    return newMessage;\n  };\n\n  const markAsRead = (conversationId) => {\n    setConversations(prev =>\n      prev.map(conv => {\n        if (conv.id === conversationId) {\n          const unreadToSubtract = conv.unreadCount;\n          setUnreadCount(prevCount => Math.max(0, prevCount - unreadToSubtract));\n          return { ...conv, unreadCount: 0 };\n        }\n        return conv;\n      })\n    );\n  };\n\n  const editMessage = (conversationId, messageId, newText) => {\n    setConversations(prev =>\n      prev.map(conv => {\n        if (conv.id === conversationId) {\n          return {\n            ...conv,\n            messages: conv.messages.map(msg =>\n              msg.id === messageId\n                ? { ...msg, text: newText, isEdited: true, editedAt: new Date() }\n                : msg\n            )\n          };\n        }\n        return conv;\n      })\n    );\n  };\n\n  const deleteMessage = (conversationId, messageId) => {\n    setConversations(prev =>\n      prev.map(conv => {\n        if (conv.id === conversationId) {\n          const updatedMessages = conv.messages.filter(msg => msg.id !== messageId);\n          return {\n            ...conv,\n            messages: updatedMessages,\n            lastMessage: updatedMessages.length > 0 ? updatedMessages[updatedMessages.length - 1].text : ''\n          };\n        }\n        return conv;\n      })\n    );\n  };\n\n  const getConversation = (conversationId) => {\n    return conversations.find(conv => conv.id === conversationId);\n  };\n\n  const value = {\n    conversations,\n    unreadCount,\n    sendMessage,\n    markAsRead,\n    getConversation,\n    editMessage,\n    deleteMessage,\n    socket\n  };\n\n  return (\n    <ChatContext.Provider value={value}>\n      {children}\n    </ChatContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}